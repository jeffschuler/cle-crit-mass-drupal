<?php

/**
 * @file
 * Allows administrators to add previous/next pagers to any node type.
 */


/**
 * Implements hook_theme()
 *
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function flippy_theme() {
  return array(
    'flippy' => array(
      'variables' => array(
        'list' => array(),
      ),
      'template' => 'flippy',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flippy_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    $form['flippy'] = array(
      '#type' => 'fieldset',
      '#title' => t('Flippy settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );

    $form['flippy']['flippy'] = array(
      '#type' => 'checkbox',
      '#title' => t('Build a pager for this content type'),
      '#default_value' => isset($form['flippy']['flippy']) ? $form['flippy']['flippy'] : variable_get('flippy_' . $form['#node_type']->type, FALSE),
    );

    $form['flippy']['flippy_head'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add semantic previous and next links to the document HEAD'),
      '#default_value' => isset($form['flippy']['flippy_head']) ? $form['flippy']['flippy_head'] : variable_get('flippy_head_' . $form['#node_type']->type, FALSE),
      '#states' => array(
        'visible' => array(   // action to take.
          ':input[name=flippy]' => array('checked' => TRUE),
        ),
      ),
    );

    $form['flippy']['flippy_label_type'] = array(
      '#type' => 'select',
      '#title' => t('Pager label type'),
      '#options' => array(
        0 => t('Custom text'),
        1 => t('Node title'),
        2 => t('Node ID'),
      ),
      '#default_value' => isset($form['flippy']['flippy_label_type']) ? $form['flippy']['flippy_label_type'] : variable_get('flippy_label_type_' . $form['#node_type']->type, 0),
      '#description' => t('Select label type to display'),
      '#states' => array(
        'visible' => array(
          ':input[name=flippy]' => array('checked' => TRUE),
        ),
      ),
    );

    $form['flippy']['flippy_prev_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label for "Previous" link'),
      '#size' => 32,
      '#default_value' => isset($form['flippy']['flippy_prev_label']) ? $form['flippy']['flippy_prev_label'] : variable_get('flippy_prev_label_' . $form['#node_type']->type, 'Previous'),
      '#states' => array(
        'visible' => array(
          ':input[name=flippy]' => array('checked' => TRUE),
          ':input[name=flippy_label_type]' => array('value' => 0),
        ),
      ),
    );

    $form['flippy']['flippy_next_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label for "Next" link'),
      '#size' => 32,
      '#default_value' => isset($form['flippy']['flippy_next_label']) ? $form['flippy']['flippy_next_label'] : variable_get('flippy_next_label_' . $form['#node_type']->type, 'Next'),
      '#states' => array(
        'visible' => array(
          ':input[name=flippy]' => array('checked' => TRUE),
          ':input[name=flippy_label_type]' => array('value' => 0),
        ),
      ),
    );

    $form['flippy']['flippy_firstlast'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show first/last links'),
      '#default_value' => isset($form['flippy']['flippy_firstlast']) ? $form['flippy']['flippy_firstlast'] : variable_get('flippy_firstlast_' . $form['#node_type']->type, FALSE),
      '#states' => array(
        'visible' => array(
          ':input[name=flippy]' => array('checked' => TRUE),
        ),
      ),
    );

    $form['flippy']['flippy_first_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label for "First" link'),
      '#size' => 32,
      '#default_value' => isset($form['flippy']['flippy_first_label']) ? $form['flippy']['flippy_first_label'] : variable_get('flippy_first_label_' . $form['#node_type']->type, 'First'),
      '#states' => array(
        'visible' => array(
          ':input[name=flippy_firstlast]' => array('checked' => TRUE),
          ':input[name=flippy]' => array('checked' => TRUE),

        ),
      ),
    );

    $form['flippy']['flippy_last_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label for "Last" link'),
      '#size' => 32,
      '#default_value' => isset($form['flippy']['flippy_last_label']) ? $form['flippy']['flippy_last_label'] : variable_get('flippy_last_label_' . $form['#node_type']->type, 'Last'),
      '#states' => array(
        'visible' => array(
          ':input[name=flippy_firstlast]' => array('checked' => TRUE),
          ':input[name=flippy]' => array('checked' => TRUE),
        ),
      ),
    );

  }
}

/**
 * Implements hook_field_extra_fields().
 */
function flippy_field_extra_fields() {
  $extra = array();
  foreach (node_type_get_names() as $type => $name) {
    if (variable_get('flippy_'. $type, NULL)) {
      $extra['node'][$type] = array(
        'display' => array(
          'flippy_pager' => array(
            'label' => t('Pager'), 
            'description' => t('Flippy module content pager.'), 
            'weight' => 5,
          ), 
        ),
      );
    }
  }
  return $extra;
}

/**
 * Implements hook_node_view().
 */
function flippy_node_view($node, $view_mode = 'full') {
  if (node_is_page($node) && variable_get('flippy_'. $node->type, NULL)) {
    $node->content['flippy_pager'] = array(
      '#theme' => 'flippy',
      '#list' => flippy_build_list($node),
    );
    
    if (variable_get('flippy_head_' . $node->type, NULL)) {
      $links = flippy_build_list($node);
      if (!empty($links['prev'])) {
        drupal_add_html_head_link(array(
          'rel' => 'prev',
          'href' => url('node/' . $links['prev']['nid']),
        ));
      }
      if (!empty($links['next'])) {
        drupal_add_html_head_link(array(
          'rel' => 'next',
          'href' => url('node/' . $links['next']['nid']),
        ));
      }
    }
  }
}

/**
 *  Function that builds the list of nodes
 */
function flippy_build_list($node) {
  $master_list = &drupal_static(__FUNCTION__);
  if (!isset($master_list)) {
    $master_list = array();
  }
  if (!isset($master_list[$node->nid])) {
    // Create a starting-point query object
    $query = db_select('node')
      ->fields('node', array('nid', 'title'))
      ->condition('nid', $node->nid, '!=')
      ->condition('status', 1)
      ->condition('type', $node->type, '=')
      ->range(0, 1);

    $first = clone $query;
    $list['first'] = $first
      ->condition('created', $node->created, '<=')
      ->orderBy('created', 'ASC')
      ->execute()->fetchAssoc();

    $list['current'] = array(
      'nid' => $node->nid,
      'title' => $node->title,
    );

    $prev = clone $query;
    $list['prev'] = $prev
      ->condition('created', $node->created, '<=')
      ->orderBy('created', 'DESC')
      ->execute()->fetchAssoc();

    $next = clone $query;
    $list['next'] = $next
      ->condition('created', $node->created, '>=')
      ->orderBy('created', 'ASC')
      ->execute()->fetchAssoc();

    $last = clone $query;
    $list['last'] = $last
      ->condition('created', $node->created, '>=')
      ->orderBy('created', 'DESC')
      ->execute()->fetchAssoc();
    
    $master_list[$node->nid] = $list;
  }
  return $master_list[$node->nid];
}

/**
 *  Implements template_preprocess_hook()
 */
function template_preprocess_flippy(&$vars) {
  drupal_add_css(drupal_get_path('module', 'flippy') . '/flippy.css');
  // for getting node type
  if ($node = menu_get_object()) {
    $vars['node'] = $node;
  }

  $label_type = variable_get('flippy_label_type_' . $vars['node']->type, NULL);

  if ($nav = $vars['list']) {
    if (variable_get('flippy_firstlast_'. $vars['node']->type, NULL)) {
      $vars['first_link'] = empty($nav['first']) ? '' : l('« ' . t(variable_get('flippy_first_label_' . $vars['node']->type, NULL)), 'node/' . $nav['first']['nid']);
      $vars['last_link'] = empty($nav['last']) ? '' : l(t(variable_get('flippy_last_label_' . $vars['node']->type, NULL)) . ' »', 'node/' . $nav['last']['nid']);
    }

    switch ($label_type) {
      case '0':
        $vars['previous_link'] = empty($nav['prev']) ? '' : l('‹ ' . t(variable_get('flippy_prev_label_' . $vars['node']->type, NULL)), 'node/' . $nav['prev']['nid']);
        $vars['next_link'] = empty($nav['next']) ? '' : l(t(variable_get('flippy_next_label_' . $vars['node']->type, NULL)) . ' ›', 'node/' . $nav['next']['nid']);
        break;
      case '1':
        $vars['previous_link'] = empty($nav['prev']) ? '' : l('‹ ' . t($nav['prev']['title']), 'node/' . $nav['prev']['nid']);
        $vars['next_link'] = empty($nav['next']) ? '' : l(t($nav['next']['title']) . ' ›', 'node/' . $nav['next']['nid']);
        break;
      case '2':
        $vars['previous_link'] = empty($nav['prev']) ? '' : l('‹ ' . t($nav['prev']['nid']), 'node/' . $nav['prev']['nid']);
        $vars['next_link'] = empty($nav['next']) ? '' : l(t($nav['next']['nid']) . ' ›', 'node/' . $nav['next']['nid']);
        break;
    }
  }
  $vars = array_merge($vars, $vars['list']);
  unset($vars['list']);
  unset($vars['node']);
}
