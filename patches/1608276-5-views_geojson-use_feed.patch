diff --git a/views/views-views-geojson-style.tpl.php b/views/views-views-geojson-style.tpl.php
deleted file mode 100644
index 4f8a944..0000000
--- a/views/views-views-geojson-style.tpl.php
+++ /dev/null
@@ -1,46 +0,0 @@
-<?php
-
-/**
- * @file
- * Default template for the Views GeoJSON style plugin using the simple format
- *
- * Variables:
- * - $view: The View object
- * - $features: Features data to be serialized as GeoJSON
- * - $options: Array of options for this style
- *
- * @ingroup views_templates
- */
-
-$jsonp_prefix = $options['jsonp_prefix'];
-
-$features_collection = array(
-  'type' => 'FeatureCollection',
-  'features' => $features,
-);
-
-if ($view->override_path) {
-  // We're inside a live preview where the GeoJSON is pretty-printed.
-  $json = _views_geojson_encode_formatted($features_collection);
-  if ($jsonp_prefix) $json = "$jsonp_prefix($json)";
-  print "<code>$json</code>";
-}
-else {
-  $json = drupal_json_encode($features_collection);
-  if ($jsonp_prefix) {
-    $json = "$jsonp_prefix($json)";
-  }
-  if ($options['using_views_api_mode']) {
-    // We're in Views API mode.
-    print $json;
-  }
-  else {
-    // We want to send the JSON as a server response so switch the content
-    // type and stop further processing of the page.
-    $content_type = ($options['content_type'] == 'default') ? 'application/json' : $options['content_type'];
-    drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
-    print $json;
-    //Don't think this is needed in .tpl.php files: module_invoke_all('exit');
-    exit;
-  }
-}
diff --git a/views/views_geojson.views.inc b/views/views_geojson.views.inc
index f3f06b8..753609b 100644
--- a/views/views_geojson.views.inc
+++ b/views/views_geojson.views.inc
@@ -16,18 +16,24 @@ function views_geojson_views_plugins() {
     'style' => array(
       'views_geojson'      => array(
         'title'            => t('GeoJSON Feed'),
-        'help'             => t('Displays nodes in the GeoJSON data format.'),
+        'help'             => t('Deprecated; please use a "Feed" display instead of a "Page" display for this purpose.'),
         'handler'          => 'views_plugin_style_geojson',
-        'theme'            => 'views_views_geojson_style',
-        'theme path'       => $path . '/views',
-        'path'             => $path . '/views',
         'uses row plugin'  => FALSE,
         'uses fields'      => TRUE,
         'uses options'     => TRUE,
-        //'uses grouping'    => FALSE,
-        //'type'             => 'feed',
+        'uses grouping'    => FALSE,
         'type'             => 'normal',
-        //'help_topic'     => 'style-geojson',
+        'even empty'     => TRUE,
+      ),
+      'views_geojson_feed'      => array(
+        'title'            => t('GeoJSON Feed'),
+        'help'             => t('Displays nodes in the GeoJSON data format.'),
+        'handler'          => 'views_plugin_style_geojson',
+        'uses row plugin'  => FALSE,
+        'uses fields'      => TRUE,
+        'uses options'     => TRUE,
+        'uses grouping'    => FALSE,
+        'type'             => 'feed',
         'even empty'     => TRUE,
       ),
     ),
@@ -77,4 +83,4 @@ function views_geojson_views_data() {
   );
 
   return $data;
-}
\ No newline at end of file
+}
diff --git a/views/views_plugin_style_geojson.inc b/views/views_plugin_style_geojson.inc
index 23e8b18..5e1225c 100644
--- a/views/views_plugin_style_geojson.inc
+++ b/views/views_plugin_style_geojson.inc
@@ -21,7 +21,8 @@ class views_plugin_style_geojson extends views_plugin_style {
         'value' => array('default' => 'asc'),
         'latitude' => array('default' => 0),
         'longitude' => array('default' => 0),
-        'openlayers_wkt' => array('default' => 0),
+        'geofield' => array('default' => 0),
+        'wkt' => array('default' => 0),
         'name_field' => array('default' => 0),
         'description_field' => array('default' => 0),
       ),
@@ -42,12 +43,18 @@ class views_plugin_style_geojson extends views_plugin_style {
   function options_form(&$form, &$form_state) {
     parent::options_form($form, $form_state);
 
-    $fields = array();
+    // If this is a page display, notify the user.
+    // @todo At the next major release, remove support for using this display
+    //       plugin with 'page' displays.
+    if ($this->display->display_plugin == 'page') {
+      $form['note'] = array(
+        '#type' => 'markup',
+        '#markup' => '<p>' . t('Using the GeoJSON display style on "Page" displays is deprecated, but will continue to work until the next release. Instead, the GeoJSON display style should be used with a "Feed" display.') . '</p>',
+      );
+    }
 
-    // Get list of fields in this view & flag available geodata fields
+    // Get list of fields in this view & flag available geodata fields.
     $handlers = $this->display->handler->get_handlers('field');
-
-    // Check for any fields, as the view needs them
     if (empty($handlers)) {
       $form['error_markup'] = array(
         '#value' => t('You need to enable at least one field before you can configure your field settings'),
@@ -58,9 +65,10 @@ class views_plugin_style_geojson extends views_plugin_style {
     }
 
     // Go through fields
+    $fields = array();
     foreach ($handlers as $field_id => $handler) {
       $fields[$field_id] = $handler->definition['title'];
-      $fields_info[$field_id]['type'] = $handler->field_info['type'];
+      $fields_info[$field_id]['type'] = (!empty($handler->field_info['type']) ? $handler->field_info['type'] : NULL);
     }
 
     // Default data source
@@ -167,7 +175,7 @@ class views_plugin_style_geojson extends views_plugin_style {
       $view_modes_machine_names[] = array_keys($entity_info['node']['view modes']);
       // Get the labels (human readable) of the view modes
       foreach ($entity_info['node']['view modes'] as $key => $view_mode) {
-        $view_modes_labels[] = $view_mode[label];
+        $view_modes_labels[] = $view_mode['label'];
       }
       // Combine the view mode machine name with its label.
       // @TODO: Could this be done better?
@@ -212,12 +220,15 @@ class views_plugin_style_geojson extends views_plugin_style {
       '#default_value'  => $this->options['content_type'],
       '#description'    => t('The Content-Type header that will be sent with the JSON output.')
     );
-    $form['using_views_api_mode'] = array(
-      '#type'           => 'checkbox',
-      '#title'          => t('Views API mode'),
-      '#default_value'  => $this->options['using_views_api_mode'],
-      '#description'    => t('Not using View API mode means the JSON gets output directly and the server ceases normal page processing.  Using it means the server does not cease processing after outputting the JSON.  This allows the Views API to be used with the view without having to prematurely terminate page processing.'),
-    );
+
+    if ($this->display->display_plugin == 'page') {
+      $form['using_views_api_mode'] = array(
+        '#type'           => 'checkbox',
+        '#title'          => t('Views API mode'),
+        '#default_value'  => $this->options['using_views_api_mode'],
+        '#description'    => t('Not using View API mode means the JSON gets output directly and the server ceases normal page processing.  Using it means the server does not cease processing after outputting the JSON.  This allows the Views API to be used with the view without having to prematurely terminate page processing.'),
+      );
+    }
 
     // Make array of attributes
     $variable_fields = array();
@@ -246,38 +257,54 @@ class views_plugin_style_geojson extends views_plugin_style {
   }
 
   /**
-   * Implementation of view_style_plugin::theme_functions(). Returns an array of theme functions to use
-   * for the current style plugin
-   * @return array
+   * Overrides view_style_plugin::render()
    */
-  function theme_functions() {
-    return views_theme_functions('views_views_geojson_style', $this->view, $this->display);
-  }
+  function render() {
+    $args = func_get_args();
+    $results = array_shift($args);
 
-  /**
-   * Implementation of views_style_plugin::additional_theme_functions(). Returns empty array.
-   * @return array
-   */
-  function additional_theme_functions() {
-    return array();
-  }
+    $features = array(
+      'type' => 'FeatureCollection',
+      'features' => array(),
+    );
 
-  /**
-   * Implementation of view_style_plugin::render()
-   */
-  function render() {
-    $view = $this->view;
-    $options = $this->options;
-    $field = $view->field;
-    $display = $this->display;
+    // Render each row.
+    foreach ($results as $i => $row) {
+      $this->view->row_index = $i;
+      $features['features'][] = _views_geojson_render_fields($this->view, $row, $i);
+    }
+    unset($this->view->row_index);
 
-    $features = array();
-    foreach ($view->result as $count => $row) {
-      $view->row_index = $count;
-      $features[] = _views_geojson_render_fields($view, $row, $count);
+    // Render the collection to JSON.
+    $json = drupal_json_encode($features);
+    if (!empty($this->options['jsonp_prefix'])) {
+      $json = $this->options['jsonp_prefix'] . "($json)";
     }
-    unset($view->row_index);
 
-    return theme($this->theme_functions(), array('view' => $view, 'options' => $options, 'features' => $features));
+    if (empty($this->view->preview)) {
+      // Change the content type header since we're sending a JSON response.
+      $content_type = ($this->options['content_type'] == 'default') ? 'application/json' : $this->options['content_type'];
+      drupal_add_http_header("Content-Type", "$content_type; charset=utf-8");
+    }
+    elseif ($this->display->display_plugin == 'page') {
+      // Pretty-print the JSON. This only works for 'page' displays.
+      $json = _views_geojson_encode_formatted($features);
+      if (!empty($this->options['jsonp_prefix'])) {
+        $json = $this->options['jsonp_prefix'] . "($json)";
+      }
+      $json = "<code>$json</code>";
+    }
+
+    if ($this->display->display_plugin == 'page' && !$this->options['using_views_api_mode']) {
+      // Page display prints and exits; this is BAD (prevents caching) but
+      // supports legacy configurations.
+      print $json;
+      exit;
+    }
+    else {
+      // Everything else returns output.
+      return $json;
+    }
   }
+
 }
